/**
 *  Apply Jacoco plugin to root build
 */
apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

allprojects {

    repositories {
        jcenter()
    }

    /** To avoid writing this in every android module */
    project.ext {
        compileSdkVersion = 22
        buildToolsVersion = '22.0.1'
        minSdkVersion = 14
        targetSdkVersion = 22

        versionCode = 2
        versionName = '1.0.1'
    }

}

/**
 *  List of modules that don't require Jacoco
 */
def ignoredByJacoco = [
        'test-helper'
]

/**
 *  Apply additional build steps to sub-projects
 */
subprojects { prj ->

    // Apply Jacoco only if the project is not in the ignore list
    if (!ignoredByJacoco.contains(prj.name)) {

        apply plugin: 'jacoco'

        jacoco {
            version '0.7.2.201409121644'
        }

        task jacocoReport(type: JacocoReport, dependsOn: 'testDebug') {
            //cleaning up the JiBx classes to jacoco will not cause problems for CareDiscovery
            doFirst {
                delete fileTree (dir: "${buildDir}/classes", include: "**/JiBX_*.class")
            }
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            classDirectories = fileTree(
                    dir: 'build/intermediates/classes/debug',
                    excludes: [
                            '**/R*.class',
                            '**/BuildConfig*'
                    ]
            )

            sourceDirectories = files('src/main/java')
            executionData = files('build/jacoco/testDebug.exec')

            doFirst {
                files('build/intermediates/classes/debug').getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }
    }
}

jacoco {
    toolVersion '0.7.2.201409121644'
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    doFirst {
        delete fileTree (dir: "${buildDir}/classes", include: "**/JiBX_*.class")
    }
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (!ignoredByJacoco.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 *  Generate a FileCollection of all projects source files
 */
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src/main/java")
    }

    return files(dirs)
}

/**
 *  Generate a FileCollection of all projects class files
 */
FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists') // I know it's ugly :)

    projects.each { prj ->
        //noinspection GrReassignedInClosureLocalVar
        tree += fileTree(
                dir: "${prj.name}/build/intermediates/classes/debug",
                excludes: [
                        '**/R*.class',
                        '**/BuildConfig*'
                ]
        )
    }

    return tree
}
